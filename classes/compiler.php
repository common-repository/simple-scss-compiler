<?php

if (!defined('ABSPATH')) {
	exit;
}

require_once sSCSScPath."vendors/scssphp-1.10.0/scss.inc.php";

use ScssPhp\ScssPhp\Compiler;

/** 
 * Simple SCSS compiler compiler class
 */
class sSCSScCompiler {

    private $data = null;
    private $needsUpdate = false;

    function __construct() {
        add_action('init', array($this, 'init'));
    }

    /**
     * Check files and compile them if there are changes
     */
    public function init() {
        // Get the files
        $this->data = get_option('sscssc-files-to-compile');
        if (!$this->data) {
            return false;
        }
        $this->data = json_decode(stripslashes($this->data));
        if (!$this->data) {
            return false;
        }
        
        $i = 0;
        foreach ($this->data as $file_group) {
            if ($file_group->input) {
                if ($this->compare_dates_of_files($file_group->input)) {
                    $this->compile_scss_files($file_group->input, $file_group->output);
                    $this->update_files_option($i);
                    $this->needsUpdate = true;
                }
            }
            $i++;
        }
        
        if ($this->needsUpdate) {
            update_option('sscssc-files-to-compile', json_encode($this->data));
        }
    }

    /**
     * Compare dates of files
     * 
     * @param object $file_group_input File group input object containing file groups
     */
    public function compare_dates_of_files($file_group_input) {
        foreach ($file_group_input as $input) {
            $file_last_modified_date = filemtime(substr(ABSPATH, 0, -1).$input->value);
            $last_modified_value = $input->lastCompiledDate;

            if ($file_last_modified_date > $last_modified_value) {
                return true;
            }
        }
    }

    /**
     * Compile scss files
     * 
     * @param object $file_group_input File group input object containing file groups
     * @param string $output Output file to compile scss to
     */
    public function compile_scss_files($file_group_input, $output) {
        $output_content = "/* -------------------------------------------------------------------------- \r\n";
        $output_content .= "WARNING \r\n";
        $output_content .= "This file is auto generated by Simple SCSS Compiler plugin. \r\n";
        $output_content .= "Please do NOT modify it directly or you risk your changes to be overwritten. \r\n";
        $output_content .= "-------------------------------------------------------------------------- */ \r\n\r\n";
        
        foreach ($file_group_input as $input) {
            $compiler = new Compiler();

            $compiler->setImportPaths(substr(ABSPATH, 0, -1).substr($input->value, 0, strrpos($input->value, '/')));

            $scss_string = file_get_contents(substr(ABSPATH, 0, -1).$input->value);

            $output_content .= $compiler->compileString($scss_string)->getCss();
        }

        file_put_contents(substr(ABSPATH, 0, -1).$output, $output_content);
    }

    /**
     * Update file settings
     * 
     * @param integer $serial_number The number representing which field group should be updated
     */
    public function update_files_option($serial_number) {
        $i = 0;
        foreach ($this->data[$serial_number]->input as $input) {
            $this->data[$serial_number]->input[$i]->lastCompiledDate = filemtime(substr(ABSPATH, 0, -1).$input->value);
            $i++;
        }
    }

}
